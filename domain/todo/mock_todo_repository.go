// Code generated by MockGen. DO NOT EDIT.
// Source: todo_repository.go
//
// Generated by this command:
//
//	mockgen -package=todo -source=todo_repository.go -destination=mock_todo_repository.go
//

// Package todo is a generated GoMock package.
package todo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockToDoRepository is a mock of ToDoRepository interface.
type MockToDoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToDoRepositoryMockRecorder
}

// MockToDoRepositoryMockRecorder is the mock recorder for MockToDoRepository.
type MockToDoRepositoryMockRecorder struct {
	mock *MockToDoRepository
}

// NewMockToDoRepository creates a new mock instance.
func NewMockToDoRepository(ctrl *gomock.Controller) *MockToDoRepository {
	mock := &MockToDoRepository{ctrl: ctrl}
	mock.recorder = &MockToDoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDoRepository) EXPECT() *MockToDoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockToDoRepository) Create(ctx context.Context, ToDo *ToDo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ToDo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockToDoRepositoryMockRecorder) Create(ctx, ToDo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockToDoRepository)(nil).Create), ctx, ToDo)
}

// Delete mocks base method.
func (m *MockToDoRepository) Delete(ctx context.Context, ToDo *ToDo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ToDo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockToDoRepositoryMockRecorder) Delete(ctx, ToDo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockToDoRepository)(nil).Delete), ctx, ToDo)
}

// Find mocks base method.
func (m *MockToDoRepository) Find(ctx context.Context, id, todo_id string) (*ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id, todo_id)
	ret0, _ := ret[0].(*ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockToDoRepositoryMockRecorder) Find(ctx, id, todo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockToDoRepository)(nil).Find), ctx, id, todo_id)
}

// Update mocks base method.
func (m *MockToDoRepository) Update(ctx context.Context, ToDo *ToDo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ToDo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockToDoRepositoryMockRecorder) Update(ctx, ToDo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockToDoRepository)(nil).Update), ctx, ToDo)
}
